          //Using a std::list to produce a interactive music playlist
#include <iostream>
#include <list>
#include <string>
#include <cctype>
#include <iomanip>
#include <limits>
#include <iterator>

class Song {
    friend std::ostream& operator<< (std::ostream& os, const Song& song);
    std::string name;
    std::string artist;
    int rating;
public:
    Song() = default;
    Song(std::string name, std::string artist, int rating)
        : name{ name }, artist{ artist }, rating{ rating } {}
    std::string get_name()const { return name; }
    std::string get_artist() const { return artist; }
    int get_rating() const { return rating; }
    bool operator<(const Song& rhs) const {
        return this->name < rhs.name;
    }
    bool operator==(const Song& rhs) const {
        return this->name == rhs.name;
    }
};

std::ostream& operator<< (std::ostream& os, const Song& song) {
    os << std::setw(20) << std::left << song.artist << " - "
        << std::setw(30) << std::left << song.name << " - Rating: "
        << std::setw(2) << std::left << song.rating;
    return os;
}

//template <typename T>
//void display(const std::list<T>& l) {
//    for (const auto& elem : l) {
//        std::cout << "[ ";
//        std::cout << elem << " ";
//        std::cout << "]" << std::endl;
//    }
//}

void display_menu() {
    std::cout << std::setw(70) << std::setfill('=') << "";
    std::cout << "\n(P) PLay First Song" << std::endl;
    std::cout << "(N) Play Next Song" << std::endl;
    std::cout << "(B) Play Previous Song" << std::endl;
    std::cout << "(A) Add New Song" << std::endl;
    std::cout << "(L) Playlist" << std::endl;
}

void play_current_song(const Song& song) {
    std::cout << "Playing: " << std::endl;
    std::cout << song << std::endl;
}

void display_playlist(const std::list<Song>& playlist, const Song& current_song) {
    for (const Song& song : playlist) {
        std::cout << song << std::endl;
    }
    std::cout << "Current song: " << std::endl;
    std::cout << current_song << std::endl;
}

int main()
{
    std::list<Song> playlist{
        {"song 1", "song artist1", 3}
    };
    playlist.emplace_back(Song{ "Born This Way", "Lady Gaga", 5 });
    playlist.emplace_back(Song{ "Ellie Goulding", "Lights", 4 });

    std::list<Song>::iterator current_song = playlist.begin(); //iterator to first list object
    display_playlist(playlist, *current_song);

    char selection{};
        do {
            display_menu();
            std::cin >> selection;
            selection = std::toupper(selection);
            if (selection == 'P') {
                std::cout << "Playing first song" << std::endl;
                current_song = playlist.begin();
                play_current_song(*current_song);
            }
            else if (selection == 'N') {
                std::cout << "Playing next song" << std::endl;
                current_song++;
                if (current_song == playlist.end()) {
                    std::cout << "Start of playlist" << std::endl;
                    current_song = playlist.begin();
                }
                play_current_song(*current_song);
            }
            else if (selection == 'B') {
                std::cout << "Playing previous song" << std::endl;
                if (current_song == playlist.begin()) {
                    std::cout << "End of playlist" << std::endl;
                    current_song = playlist.end();
                }
               current_song = current_song--;
               play_current_song(*current_song);
            }
            else if (selection == 'A') {
                std::string name;
                std::string artist;
                int rating;
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Adding & playing new song" << std::endl;
                std::cout << "Enter song name:";
                std::getline(std::cin, name);
                std::cout << "Enter Artist: ";
                std::getline(std::cin, artist);
                std::cout << "Enter rating(1-5): ";
                std::cin >> rating;
                playlist.insert(current_song, Song{ name,artist,rating });
                current_song--;
                play_current_song(*current_song);
            }
            else if (selection == 'L') {
                std::cout << std::endl;
                display_playlist(playlist, *current_song);
            }
            else if (selection == 'Q')
                std::cout << "Goodbye." << std::endl;
            else
                std::cout << "Error, try again...";

        } while (selection != 'Q');

        return 0;
}

